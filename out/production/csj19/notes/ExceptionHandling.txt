What is an Exception?
- It is an unwanted, unexpected event that disturbs the normal flow execution of program.
- it is an event that cause abnormal termination of the program.
- it is a class present inside package java.lang
- it is an object which is thrown by the JRE.
- exceptions can be recovered.
- mostly developer mistakes causes the exception to occur.

What do you mean by exception handling?
- preventing the abnormal termination of the program with the help of try-catch-finally

What is default exception handling in Java?
- whenever an exception occurs, then implicitly, an exception object is created, and it is given to the default exception handler.
- Default exception handler prints the exception details and terminate the program.

What is an error?
- It is an unwanted, unexpected event that terminates the program abnormally.
- Errors cannot be recovered.
- eg. StackOverFlowError, OutOfMemoryError

What is exception hierarchy:
- Throwable is the top class in the exception hierarchy.
- Exception extends Throwable
- RuntimeException extends Exception
- Error extends Throwable

Types of exception:
- Checked exception:
    - Exceptions which are checked at compile time and Checked exceptions extends Exception class.
    - eg. CloneNotSupportedException -
    - Some checked Exceptions in the java language
    1.	ClassNotFoundException If the loaded class is not available
    2.	CloneNotSupportedException Attempt to clone an object that does not implement the Cloneable interface.
    3.	IllegalAccessException Access to a class is denied.
    4.	InstantiationException Attempt to create an object of an abstract class or interface.
    5.	InterruptedException One thread has been interrupted by another thread.
    6.	NoSuchFieldException A requested field does not exist.
    7.	NoSuchMethodException If the requested method is not available.

- UnChecked exception:
    - Exceptions which are checked at run time and UnChecked exceptions extends RuntimeException or Error class.

    1.	ArithmeticException 	Arithmetic error, such as divide-by-zero.
    2.	ArrayIndexOutOfBoundsException 	Array index is out-of-bounds.(out of range)
    3.	InputMismatchException 	If we are giving input is not matched for storing input.
    4.	ClassCastException 	If the conversion is Invalid.
    5.	IllegalArgumentException 	Illegal argument used to invoke a method.
    6.	IllegalThreadStateException 	Requested operation not compatible with current thread state.
    7.	IndexOutOfBoundsException 	Some type of index is out-of-bounds.
    8.	NegativeArraySizeException 	Array created with a negative size.
    9.	NullPointerException 	Invalid use of a null reference.
    10.	NumberFormatException 	Invalid conversion of a string to a numeric format.
    11.	StringIndexOutOfBoundsException 	Attempt to index outside the bounds of a string.


What are different ways to handle exception?
1. by using try-catch
2. by using throws


#Handling exception with the help of try-catch

try {
// exception prone code.
}
catch(Exception ex){
// exception handling code
}
finally{
// code to close the connection to the server, db, file
}

- We write exception prone code inside the try.
- catch block is a user defined exception handler.
- When there is no exception occurring inside the try then catch block will not be executed.
- finally block will always be executed irrespective of the exception occurrence.
- we cannot have multiple finally blocks.
- try, catch, finally can not come independently.

valid uses of try, catch, finally
- TCF
- TC
- TF
- TCCF
- T{TCF}CF

Invalid:
- TTC
- TCFF
- TFFF

** Whenever an exception occurs inside the try block,
    then rest of the code from try won't be executed.


If we are declaring multiple catch blocks, at that situation,
the catch block order should be child to parent. shouldnâ€™t be parent to the child.

- The exception raised in catch block it is always abnormal termination.

# throw
- it is keyword which is used to throw an exception object explicitly.
- with throw we can throw the exception object of both user-defined exceptions as well as predefined exception class objects

1)	The main purpose of the throw keyword is to create an Exception object explicitly either for predefined or user defined.
2)	Throw keyword works like a try block. The difference is try block is automatically find the situation and creates an Exception object implicitly. Whereas throw keyword creates an Exception object explicitly.
3)	Mostly the main method is responsible to create an exception object. So the main method is creating exception object implicitly. A programmer is not responsible person to create an exception object.

- we are using throw keyword inside the method.

Throws keyword
1)  main purpose of the throws keyword is bypassing the generated exception from present method to caller method.
2)	Throw keyword is used in the method body. But throws keyword we have to use in the method declaration.
3)	It is possible to throws any number of exceptions at a time based on the programmer requirement.
4)	In the java language we are handling the Exception in two ways
1)	By using try-catch blocks
2)	By using throws keyword
















