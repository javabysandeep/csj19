	1. Define String
	Ans.
	    - It is a predefined class in Java present in java.lang.package.
	    - it represents group of characters.
	    - internally it used array of characters to store group of characters.
	    - String class provides different predefined methods.

	2. In How many ways we can store string data?
	Ans.
	    - Using array of characters
	    - Using String class

	3. Why String class is given when char array is already available?
	Ans.
	    - representing strings in array of chars directly is time-consuming.
	    - no method support in array of characters
	    - array of chars is not memory efficient

	4. What are the different ways to construct String object?
	Ans.
	    - by using new keyword : String str = new String("some string");
	    - by using literal way: String str = "some string";

	5. What is the difference in String object creation from the String literal and the constructor?
	Ans.
	   - Using literal way
	    - String object is created inside the SCP[String Constant Pool memory area]
	    - Object creation is optional in SCP.
	    - If the string content object is already present inside SCP
	        then new object will not be created,
	        existing object reference will be returned.
	    - SCP memory area is present inside the HEAP memory block[ from 1.7].
	            [till 1.6 it was present inside Class area]

	   - by using new keyword
	     - String object is created inside the HEAP memory area without any check.
	     - It will always point to the object present inside the HEAP
	     - String object will be created inside SCP as well if the object is not present inside the SCP


	6. String Pooling
	Ans.
	    - it is special memory created to store string objects for memory efficiency.
	    - SCP is present inside the HEAP
	    - In, SCP  object content will be checked before new object created.
	    - If it is already present, then new object won't be created.
	    - If it is not present, then new object will be created.

	7. What is immutable and why String objects are immutable?
	Ans.- Immutable means we can't the change content of an object.
	    - To avoid the object content to be modified as there can be multiple references pointing to the same object.

	8. What do you mean by immutable and mutable objects?
	Ans. - Immutable object : Once object is created, if we are not able to change the content.
	     - Mutable objects: we change the content of an object.

	9. Can we develop immutable object?
	Ans. Yes.
	    1. make the class final
	    2. make data members private
	    3. do not provide setters.

	10. Why StringBuffer class is given when we have String class to Store String data?
	Ans. String objects are immutable. StringBuilder objects are mutable.

	11. Why StringBuilder class is given when we have String, StringBuffer class to Store String data?
	Ans. StringBuffer is thread safe and it is slow. StringBuilder is not a thread safe.

	12. Is String thread safe?
	Ans. No.

	13. String vs StringBuffer vs StringBuilder
	Ans.

	14. Can we assign String literal directly to StringBuffer or StringBuilder type variables?
	Ans.
	    1. Creating the objects with the literal is only allowed for String class object creation.
	    2. // StringBuilder  stringBuilder = "some string";//CTE

	15. Printing String object
	Ans. 1. toString() is overridden in String class which returns the actual string content.
	     2. System.out.println(new String("string values"));//string values

	16. How can we find length of the String?
	Ans.  by using length() method defined inside the String class

	17. what is the difference between length & length()?
	Ans. - length is variable created for every array object which returns the size of an array.
	     - length() is method present inside the String class.

	18. The limitation of String class.
	Ans. String objects are immutable.

	19. Concatenation, how Strings can be concatenated?
	Ans. - by using + operator
	     - by using concat method from String class
	        e.g. String newString = meeting.concat("Java");

	20. Convert String case
	Ans. by using toUpperCase(), toLowerCase()

	21. How can we replace a character or substring in the given String?
	Ans. replace(old, new);

	22. How can we trim string leading and trailing spaces?
	Ans. trim();

	23. How String Objects must be compared for equality?
	Ans.

	24. What do meant by comparing string objects lexicographically, how it can be done?--> compareTo
	25. How can we read characters from the String?
	26. How can we find the position of a character or sub-string?
	27. Finding string startsWith or endsWith
	28. Spliting string into tokens
	29. What are the differnt operations we can't perform on string using String object?
	30. Define StringBuffer
	31. When to use StringBuffer class?
	32. What are the special operations can be performed on StringBuffer;
	those cannot be applied on String?
	33. Ways of creating StringBuffer object creation?
	34. Append, Insert, Delete, reverse and overriding characters in the  StringBuffer.
	35. Finding StringBuffer capacity and length
	36. Controlling StringBuffer capacity
	37. Ways of Converting String to StringBuffer and vice versa
